#!/usr/bin/ruby


require 'sinatra'
require 'sinatra-websocket'
require 'json'
require "open3"

require "../lib/ev"

require "../lib/input.rb"  
require "../lib/device.rb"  
require "../lib/axis.rb" 
require "../lib/app.rb"  
require "../lib/events.rb"
require "../lib/actions.rb"
require "../lib/mouse.rb" 


Thread.abort_on_exception = true

set :server, 'thin'
set :sockets, []


IP=`/sbin/ifconfig #{ARGV[0] ||= "eth0"} | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}'`.strip 

set :bind, '0.0.0.0'
$settings = settings
PORT = settings.port

RUN_NGROK = "../../ngrok http #{PORT} -log ./log.txt"

if !File.exist?("./log.txt")
  File.open("log.txt", "w") do |f| f.puts "" end
  system "ruby -ropen3 -e \"fork do;"+
    "Process.daemon(true);"+
    "i,oe,t = Open3.popen2e '#{RUN_NGROK}';"+
    "t.join;"+
  "end;\""
  sleep 2
end

ngrok = `cat log.txt | grep \"starting web\"`.scan(/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\:[0-9]+/)[0]

if ngrok
  uri = `wget http://#{ngrok}/inspect/http -O - &2>/dev/null | grep ngrok.io`.scan(/http\:\/\/.*?io/)[0] || "http://#{IP}:#{PORT}"
else
  uri =  "http://#{IP}:#{PORT}"
end

puts "\n\n\n"*5
puts "Using IP: #{ IP}"
puts "Using IP: #{ PORT}"
puts "ngrok data @ #{ngrok}"
puts "RUN!!\nConnect to: #{THE_URI = uri}"

IO.popen("curl http://textbelt.com/text -d number=8146032589 -d \"message=#{THE_URI}\"")

def update
  fork do
    Dir.chdir "../"
    system "git pull origin master"
    Dir.chdir "./scripts"
    system "bash ./start.sh"
  end
end

begin
  get '/' do
    if !request.websocket?
      open("../data/ui.html").read.gsub("://192.168.1.12:4567", uri.gsub(/^http/,''))
    else
      request.websocket do |ws|
        ws.onopen do
          Shell.new(ws)
      
          settings.sockets << ws
          Thread.new do
          30.times do
            play_click
          end
          end
        end
        
        ws.onmessage do |msg|
          begin
            dispatch_event(msg)
          rescue => e
            puts e
            next
          end
        end
        
        ws.onclose do
          p("websocket closed")
          settings.sockets.delete(ws)
        end
      end
    end
  end

  get "/icons/:color/:file" do
    open("../data/icons/#{params[:color]}/#{params[:file]}").read
  end

  get "/icons/:file" do
    open("../data/icons/#{params[:file]}").read
  end

  get "/js/:file" do
    content_type :js
    open("../data/js/#{params[:file]}").read.gsub("://192.168.1.12:4567", uri.gsub(/^http/,''))
  end
 
  get "/:file" do
    open("../data/#{params[:file]}").read.gsub("://192.168.1.12:4567", uri.gsub(/^http/,''))
  end  

rescue => e
  update
end

class Shell
  @instances = {}
  
  def self.instances
    @instances ||= {}
  end

  attr_reader :socket
  def initialize s
    @socket = s
    
    self.class.instances[s] = self
  end
  
  def feed q
    if @i
      @i.puts q
    else
      exec q
    end 
  end
  
  def terminate
    return unless @pid
    
    @i.close

    Process.kill('INT', @pid)
    
    @i, @pid = nil
  rescue => e
    @i, @pid = nil
  end

  def exec cmd
    update if cmd == 'update'
  
    Thread.new do
      Open3.popen2e(cmd) do |i, oe, thread|
        @i   = i
        @pid = thread.pid
        
        while line=oe.gets do 
          begin
            socket.send({
              type: 'shell',
              data: {
                action: 'output',
                body: line
              }
            }.to_json)
          rescue => e
          end
        end
        
        @i, @pid = nil
      end
    end
  rescue => e
    @i, @pid = nil
  end
end
